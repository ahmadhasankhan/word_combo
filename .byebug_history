c
file_data.split(/\W+/)
file_data.split(/\w+/)
file_data.split(/\W+/)
file_data.split(/\W+/).include?('m')
file_data.split(/\W+/)
data.include?('I')
data.include?('i')
data.include?(i
data
file_data.scan(/\b[A-z]*\b/)
file_data
data
word
c
@hashed_values['m']
 @hashed_values[
q
c
ccc
@hashed_values
@dict_data
@hashed_values
@dict_data
c
@hashed_values
@dict_data
c
result
n
s
c
exception
n
s
c
exception
n
s
c
exception
n
c
exception
n
@dict_data
dict_data
n
c
hashed_values
@hashed_values
dict_data
file_data
c
hashed_values
dict_data
c
exception
n
dict_data
n
c
rows == rows.sort
n
rows
n
file_data
n
c
file_data.scan(/\b[A-z]*\b/).reject(&:blank?)
file_data.scan(/\b[A-z]*\b/)..reject(&:blank?)
file_data.scan(/\b[A-z]*\b/)
file_data.scan(/[A-z]/)
file_data.scan(/\[A-z]/)
file_data.split(' ')
file_data.scan(/\b[A-z]*\b/)
file_data.split(' ')
file_data.scan(/\b[A-z]*\b/)
file_data
file_data.scan(/\b[A-z]*\b/)
file_data.scan(/\b[aeiou][a-z]*\b/)
n
c
file_data.match(/[A-z]/)
file_data
n
file.data
c
file_data.split("\r")
file_data.split(' ')
ile_data.split(' ')
n
c
file.read
File.read(file.path)
c
File.read(file.path)
file.read
